name: test-suite

on:
  push:
    branches:
      - stable
      - staging
      - trying
      - 'pr/*'
  pull_request:
env:
  # Deny warnings in CI
  RUSTFLAGS: "-D warnings"
  # The Nightly version used for cargo-udeps, might need updating from time to time.
  PINNED_NIGHTLY: nightly-2021-12-01
jobs:
  target-branch-check:
    name: target-branch-check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
        - name: Check that pull request is targeting unstable branch
          run: test ${{ github.base_ref }} = "unstable"
  cargo-fmt:
    name: cargo-fmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Check formatting with cargo fmt
      run: make cargo-fmt
  release-tests-ubuntu:
    name: release-tests-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Install ganache-cli
      run: sudo npm install -g ganache-cli
    - name: Run tests in release
      run: make test-release
  release-tests-windows:
    name: release-tests-windows
    runs-on: windows-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Install ganache-cli
      run: npm install -g ganache-cli
    - name: Install make
      run: choco install -y make
    - uses: KyleMayes/install-llvm-action@v1
      with:
        version: "13.0"
        directory: ${{ runner.temp }}/llvm
    - name: Set LIBCLANG_PATH
      run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
    - name: Run tests in release
      run: make test-release
  beacon-chain-tests:
    name: beacon-chain-tests
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Run beacon_chain tests for all known forks
      run: make test-beacon-chain
  op-pool-tests:
    name: op-pool-tests
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Run operation_pool tests for all known forks
      run: make test-op-pool
  debug-tests-ubuntu:
    name: debug-tests-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Install ganache-cli
      run: sudo npm install -g ganache-cli
    - name: Run tests in debug
      run: make test-debug
  state-transition-vectors-ubuntu:
    name: state-transition-vectors-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Run state_transition_vectors in release.
      run: make run-state-transition-tests
  ef-tests-ubuntu:
    name: ef-tests-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Run consensus-spec-tests with blst, milagro and fake_crypto
      run: make test-ef
  dockerfile-ubuntu:
    name: dockerfile-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Build the root Dockerfile
      run: docker build --build-arg FEATURES=portable -t lighthouse:local .
    - name: Test the built image
      run: docker run -t lighthouse:local lighthouse --version
  eth1-simulator-ubuntu:
    name: eth1-simulator-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Install ganache-cli
      run: sudo npm install -g ganache-cli
    - name: Run the beacon chain sim that starts from an eth1 contract
      run: cargo run --release --bin simulator eth1-sim
  no-eth1-simulator-ubuntu:
    name: no-eth1-simulator-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Install ganache-cli
      run: sudo npm install -g ganache-cli
    - name: Run the beacon chain sim without an eth1 connection
      run: cargo run --release --bin simulator no-eth1-sim
  syncing-simulator-ubuntu:
    name: syncing-simulator-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
      - uses: actions/checkout@v1
      - name: Get latest version of stable Rust
        run: rustup update stable
      - name: Install ganache-cli
        run: sudo npm install -g ganache-cli
      - name: Run the syncing simulator
        run: cargo run --release --bin simulator syncing-sim
  doppelganger-protection-test:
      name: doppelganger-protection-test
      runs-on: ubuntu-latest
      needs: cargo-fmt
      steps:
          - uses: actions/checkout@v1
          - name: Get latest version of stable Rust
            run: rustup update stable
          - name: Install ganache-cli
            run: sudo npm install -g ganache-cli
          - name: Install lighthouse and lcli
            run: |
                make
                make install-lcli
          - name: Run the doppelganger protection success test script
            run: |
                cd scripts/tests
                ./doppelganger_protection.sh success
          - name: Run the doppelganger protection failure test script
            run: |
                cd scripts/tests
                ./doppelganger_protection.sh failure
  check-benchmarks:
    name: check-benchmarks
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Typecheck benchmark code without running it
      run: make check-benches
  check-consensus:
    name: check-consensus
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Typecheck consensus code in strict mode
      run: make check-consensus
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Lint code for quality and style with Clippy
      run: make lint
    - name: Certify Cargo.lock freshness
      run: git diff --exit-code Cargo.lock
  arbitrary-check:
    name: arbitrary-check
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Validate state_processing feature arbitrary-fuzz
      run:  make arbitrary-fuzz
  cargo-audit:
    name: cargo-audit
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Run cargo audit to identify known security vulnerabilities reported to the RustSec Advisory Database
      run:  make audit
  cargo-vendor:
    name: cargo-vendor
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Run cargo vendor to make sure dependencies can be vendored for packaging, reproducibility and archival purpose
      run:  CARGO_HOME=$(readlink -f $HOME) make vendor
  cargo-udeps:
    name: cargo-udeps
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Install Rust (${{ env.PINNED_NIGHTLY }})
      run: rustup toolchain install $PINNED_NIGHTLY
    - name: Install cargo-udeps
      run: cargo install cargo-udeps --locked
    - name: Create Cargo config dir
      run: mkdir -p .cargo
    - name: Install custom Cargo config
      run: cp -f .github/custom/config.toml .cargo/config.toml
    - name: Run cargo udeps to identify unused crates in the dependency graph
      run: make udeps
    env:
      # Allow warnings on Nightly
      RUSTFLAGS: ""
