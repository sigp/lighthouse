name: test-suite

on:
  push:
    branches:
      - master
      - staging
      - trying
      - 'pr/*'
  pull_request:
env:
  # Deny warnings in CI
  RUSTFLAGS: "-D warnings"
jobs:
  cargo-fmt:
    name: cargo-fmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Check formatting with cargo fmt
      run: make cargo-fmt
  release-tests-ubuntu:
    name: release-tests-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Install ganache-cli
      run: sudo npm install -g ganache-cli
    - name: Run tests in release
      run: make test-release
  debug-tests-ubuntu:
    name: debug-tests-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Install ganache-cli
      run: sudo npm install -g ganache-cli
    - name: Run tests in debug
      run: make test-debug
  state-transition-vectors-ubuntu:
    name: state-transition-vectors-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Run state_transition_vectors in release.
      run: make run-state-transition-tests
  ef-tests-ubuntu:
    name: ef-tests-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Get latest version of stable Rust
      run: rustup update stable
    - name: Run eth2.0-spec-tests with blst, milagro and fake_crypto
      run: make test-ef
  dockerfile-ubuntu:
    name: dockerfile-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Build the root Dockerfile
      run: docker build .
  eth1-simulator-ubuntu:
    name: eth1-simulator-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Install ganache-cli
      run: sudo npm install -g ganache-cli
    - name: Run the beacon chain sim that starts from an eth1 contract
      run: cargo run --release --bin simulator eth1-sim
  no-eth1-simulator-ubuntu:
    name: no-eth1-simulator-ubuntu
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Install ganache-cli
      run: sudo npm install -g ganache-cli
    - name: Run the beacon chain sim without an eth1 connection
      run: cargo run --release --bin simulator no-eth1-sim
  check-benchmarks:
    name: check-benchmarks
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Typecheck benchmark code without running it
      run: make check-benches
  check-consensus:
    name: check-consensus
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Typecheck consensus code in strict mode
      run: make check-consensus
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Lint code for quality and style with Clippy
      run: make lint
    - name: Certify Cargo.lock freshness
      run: git diff --exit-code Cargo.lock
  arbitrary-check:
    name: arbitrary-check
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Validate state_processing feature arbitrary-fuzz
      run:  make arbitrary-fuzz
  cargo-audit:
    name: cargo-audit
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Run cargo audit to identify known security vulnerabilities reported to the RustSec Advisory Database
      run:  make audit
  cargo-udeps:
    name: cargo-udeps
    runs-on: ubuntu-latest
    needs: cargo-fmt
    steps:
    - uses: actions/checkout@v1
    - name: Install a nightly compiler with rustfmt, as a kind of quality control
      run: rustup toolchain install --component=rustfmt nightly
    - name: Install cargo-udeps
      run: cargo install cargo-udeps --locked
    - name: Run cargo udeps to identify unused crates in the dependency graph
      run: make udeps
    env:
      # Allow warnings on Nightly
      RUSTFLAGS: ""
